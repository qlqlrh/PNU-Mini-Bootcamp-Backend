<!DOCTYPE html>
<html lang="en">

<head>
  <%- include common/head.ejs %>
</head>

<body class="hold-transition sidebar-mini layout-fixed">
  <div class="wrapper">
    <%- include common/navbar.ejs %>
    <%- include common/left.ejs %>
    <%- include pages/boardContent.ejs %>
    <%- include common/footer.ejs %>
    <%- include common/right.ejs %>
  </div>
  <!-- ./wrapper -->
  <%- include common/addjs.ejs %>
  <!-- 프런트단에서 화면 조작, 서버와 통신(ajax) 등등 -->
  <script>
    // 최초 사이트가 뜨면 검색결과 하면은 지워진다(없다, 않보인다)
    $('#searchResultView').empty()

    // 화면이 뜨고 0.5초후에 서버에 가서 국가코드를 가져와 select 완성
    setTimeout(() => {
      $.get({
        url: '/board/ccode',
        dataType: 'json',
        success: data => {
          console.log( '코드 획득 결과', data.rows )
          console.log( $('#searchForm select') )
          // select 태그 밑에서 동적으로
          // 디자인이 적용되면서 엘리먼트 간 종속관계가 변경 => css selector 다시 적용 or 관계 없게 구성 (ID만 적용)
          $('#searchForm select').empty()
          // <option value="KOR">KOR</option> 이런형태로
          // 232개를 추가하시오
          for (let { code } of data.rows) {
            $('#searchForm select').append(`
            <option value="${code}">${code}</option>
          `)
          }
        }
      })
    }, 1000 * 0.5)
    // 이벤트 추가
    $('#searchForm select').on('change', e => {
      console.log(e.target.value)
      // 검색 입력창에 변경된 값을 세팅
      $('#keyword').val(e.target.value)
      // 강제 이벤트 발생 -> trigger()
      // 검색 버튼을 자동으로 클릭해준다 => submit 이벤트 발생 -> 검색 수행
      // $('#searchForm [type=submit]').trigger('click')
      $('#searchForm button').trigger('click')
    })

    // 테스트를 위해서 검색값을 미리 세팅
    //$('#keyword').val('KOR')

    // 화면에 존재하는 모든 요소를 엑세스 할수 있다  
    // JS 사용법, 1.대상을 특정해라(css selector|xPath) 2.이벤트 처리(클릭, 통신, 화면조작,..)
    // id 속성을 요소 찾기 => #id값
    // jQuery에서 요소 특정시 사용하는 문법 $('css selector')
    // 표준 JS 라면 요소.addEventListener()
    $('#searchForm').on('submit', e => {
      // 화면이 넘어가지 않게 제어
      e.preventDefault();
      // ajax 처리
      // 1. 사용자 검색어 추출
      let keyword = $('#keyword').val()
      console.log('검색어, 통신 시작 전', keyword)
      // 2. ajax 통신 : $.ajax() or $.get() or $.post() <-> fetch() : 순수 JS
      $.post({
        url: '/board/search',                // 데이터를 보내는 서버측 url
        data: $('#searchForm').serialize(),  // 키=값 형태로 전송, json 형태로 전송 => $('#searchForm').serializeArray()
        // == data: `word=${keyword}`        // 키=값&키=값,...
        dataType: 'json',                    // 응답 데이터는 json 형식을 따른다 => 서버측은 res.json()로 응답
        success: (res) => {                  // 통신 성공
          //let { rows } = res   // 검색 결과 
          addSearchResultView(keyword, res)
        },
        error: (err) => {                      // 통신 오류, 파싱(json로 변환) 오류
          console.log('에러', err)
        },
      })

      // 이벤트 무효화
      return false;
    })
    //document.querySelector('#searchForm')

    // 동적으로 검색 결과를 붙인다
    // 인자 : 검색어, 검색결과
    function addSearchResultView(searchKeyword, { rows }) {
      console.log('addSearchResultView', searchKeyword)  // 검색어
      console.log(rows)           // 배열형태의 맴버를 객체형으로 가진 배열

      let dyHtml = `
      <p>검색어 : <span style="color:red;">${searchKeyword}</span></p>
      <ul id="citys"></ul>
    `
      // html을 동적으로 화면에 추가
      // $().apend(html) <-> 요소객체.innerHtml = html
      // 방법 1
      //$('#searchResultView').empty()
      //$('#searchResultView').append( dyHtml )
      // 방법 2
      $('#searchResultView').html(dyHtml)

      // 결과 추가
      for (let row of rows) {
        let { id, nm, popu } = row
        //console.log( id, nm, popu )
        // 결과값 동적추가, 상세보기를 진입할수 있는 링크 제공
        $('#citys').append(`<li>
        <a href="/board/detail/${id}">${nm}-${popu}</a>
      </li>`)
      }

      // 입력창 초기화
      $('#keyword').val('')

    }
  </script>
</body>

</html>